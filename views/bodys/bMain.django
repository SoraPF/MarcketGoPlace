{% include "partials/head.django"%}
{% include "layouts/ads.django"%}
<script>
    document.addEventListener('DOMContentLoaded', async () => {
        try {
            const response = await fetch(`/api/article/categID/1`, {
                method: 'GET',
            });
    
            const data = await response.json();
    
            if (response.ok) {
                updateItems(data);
            } else {
                alert(data.error);
            }
        } catch (error) {
            console.error("Erreur lors de la recherche de l'article:", error);
        }
    });

    async function getItems(id){
        try {
            const response = await fetch(`/api/article/categID/${id}`, {
                method: 'GET',
            });
            const data = await response.json();
    
            if (response.ok) {
                updateItems(data);
            } else {
                alert(data.error);
            }
        } catch (error) {
            console.error("Erreur lors de la recherche de l'article:", error);
            alert("Une erreur est survenue. Veuillez réessayer plus tard.");
        }
    }

    function updateItems(items) {
        const grid = document.getElementById('grid');
        grid.innerHTML = '';
    
        // Vérifie s'il y a des items à afficher
        if (!items || items.length === 0) {
            const emptyMessage = document.createElement('p');
            emptyMessage.textContent = 'No items available.';
            emptyMessage.className = 'text-center text-gray-500';
            grid.appendChild(emptyMessage);
            return;
        }
    
        items.forEach(item => {
            // Crée un lien pour chaque item
            const itemLink = document.createElement('a');
            itemLink.href = `/article/${item.ID}`;
            
            // Crée la div de chaque item
            const itemDiv = document.createElement('div');
            itemDiv.className = 'h-80 bg-gray-200 border border-gray-300 rounded-lg shadow-lg relative flex flex-col items-center justify-center p-4';
    
            // Image (affiche une image par défaut si elle est manquante)
            const img = document.createElement('img');
            img.src = item.Img && item.Img.length > 0 ? item.Img[0] : 'https://via.placeholder.com/192'; // Remplacez par le chemin de votre image par défaut
            img.alt = 'Image';
            img.className = 'absolute top-0 left-0 right-0 mx-auto w-48 h-48 object-cover border-2 border-gray-300';

            // Catégorie (affiche 'Unknown category' si elle est manquante)
            const categorySpan = document.createElement('span');
            categorySpan.className = 'text-lg font-semibold mt-40';
            categorySpan.textContent = item.Category && item.Category.name ? item.Category.name : 'Unknown category';
    
            // Titre (affiche 'Untitled' si le titre est manquant)
            const titleSpan = document.createElement('span');
            titleSpan.className = 'text-xl font-bold mt-2';
            titleSpan.textContent = item.Title ? item.Title : 'Untitled';
    
            // Prix (affiche 'N/A' si le prix est manquant)
            const priceSpan = document.createElement('span');
            priceSpan.className = 'text-md text-gray-700 mt-1';
            priceSpan.textContent = item.Price !== undefined ? `$${item.Price}` : 'N/A';
    
            // Assemble les éléments dans l'itemDiv
            itemDiv.appendChild(img);
            itemDiv.appendChild(categorySpan);
            itemDiv.appendChild(titleSpan);
            itemDiv.appendChild(priceSpan);
    
            // Ajoute l'itemDiv au lien
            itemLink.appendChild(itemDiv);
    
            // Ajoute l'item au grid
            grid.appendChild(itemLink);
        });
    }
    
</script>
<div class="flex flex-col md:flex-row w-full p-4 space-x-4">
    <!-- Partie gauche : Liste de catégories avec défilement -->
    <div class="w-full md:w-1/3 h-96 overflow-y-scroll border border-gray-300 rounded-lg p-2">
        {% for category in Categories %}
            <div class="flex items-center text-gray-700 bg-gray-100 border border-gray-300 rounded-lg p-2 shadow-lg h-20 mb-2 cursor-pointer" onclick="getItems({{ category.ID }})">
                <img src="{{ category.Img }}" alt="Category Image" class="w-16 h-16 object-cover rounded-full">
                <span class="ml-4">{{ category.Title }}</span>
            </div>
        {% endfor %}
    </div>

    <div id="item-container" class="w-full md:w-2/3 h-96 border border-gray-300 rounded-lg p-2 overflow-y-auto">
        <div id="grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
        </div>
    </div>
</div>



