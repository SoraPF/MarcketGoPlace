<!-- drawer component -->
<div class="container grid md:grid-cols-4 grid-cols-2 gap-6 pt-4 pr-4 pb-16 items-start">
    <!-- ./sidebar -->
    <div class="col-span-1 bg-white px-4 pb-6 shadow rounded overflow-hiddenb hidden md:block">
        <div class="divide-y divide-gray-200 space-y-5">
            <div>
                <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Tags</h3>
                <div class="space-y-2 grid grid-cols-2">
                    {%for tag in tags%}
                    <div class="flex items-center">                        
                        <input type="checkbox" name="{{tag.Title}}" id="tag-{{tag.ID}}"
                            class="text-primary focus:ring-0 rounded-sm cursor-pointer">
                        <label for="{{tag.Title}}" class="text-gray-600 ml-3 cusror-pointer">{{tag.Title}}</label>
                    </div>
                    {%endfor%}
                </div>
            </div>

            <div class="pt-4">
                <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Brands</h3>
                <div class="space-y-2">
                    <div class="flex items-center">
                        <input type="checkbox" name="brand-1" id="brand-1"
                            class="text-primary focus:ring-0 rounded-sm cursor-pointer">
                        <label for="brand-1" class="text-gray-600 ml-3 cusror-pointer">Cooking Color</label>
                    </div>
                </div>
            </div>

            <div class="pt-4">
                <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Price</h3>
                <div class="mt-4 flex items-center">
                    <input type="text" name="min" id="min"
                        class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm"
                        placeholder="min">
                    <span class="mx-3 text-gray-500">-</span>
                    <input type="text" name="max" id="max"
                        class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm"
                        placeholder="max">
                </div>
            </div>
        </div>
    </div>
        <!-- products side -->
        <!-- sorting -->
        <div class="col-span-3">
            <div class="flex items-center mb-4">
                <label for="sort" class="text-sm text-gray-600 mr-3">Sort by:</label>
                <select name="sort" id="sort"
                    class="w-44 text-sm text-gray-600 py-2 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary">
                    <option value="default">Default sorting</option>
                    <option value="price-low-to-high">Price low to high</option>
                    <option value="price-high-to-low">Price high to low</option>
                    <option value="latest">Latest product</option>
                </select>
            </div>
        <!-- products -->
        <div id="products-container" class="grid md:grid-cols-3 grid-cols-2 gap-6">
            {% if articles %}
            {% for article in articles %}
            <div class="bg-white shadow rounded overflow-hidden group" data-price="{{article.Price}}" data-date="{{article.Date}}">
                <div class="relative flex justify-center">
                    <a href="/article/{{article.ID}}">
                        <img src="{{article.Img[0]}}" alt="{{article.Title}}" class="h-40 object-cover w-full">
                    </a>
                </div>
                <div class="pt-4 pb-3 px-4">
                    <a href="/article/{{article.ID}}">
                        <h4 class="uppercase font-medium text-xl mb-2 text-gray-800 hover:text-primary transition">
                            {{article.Title}}
                        </h4>
                    </a>
                    <div class="flex items-baseline mb-1 space-x-2">
                        <p class="text-xl text-primary font-semibold">{{article.Price}} XPF</p>
                    </div>
                </div>
            </div>
            {% endfor %}
            {% else %}
            <p>Il n'y a aucun article dans cette catégorie.</p>
            {% endif %}
        </div>

    </div>
    <!-- ./products -->
</div>
<div id="pagination" class="flex justify-center gap-2 mt-4 mb-4">
    <button id="prev-page" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg shadow-md hover:bg-gray-400 focus:outline-none" disabled>Previous</button>
    <div id="page-numbers" class="flex gap-2">
        <!-- Les numéros de page seront insérés ici par JavaScript -->
    </div>
    <button id="next-page" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg shadow-md hover:bg-gray-400 focus:outline-none">Next</button>
</div>


<!-- ./shop wrapper -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const itemsPerPage = 6; // Nombre d'articles par page
        const productsContainer = document.getElementById('products-container');
        const items = Array.from(productsContainer.children);
        const totalPages = Math.ceil(items.length / itemsPerPage);
        let currentPage = 1;

        const showPage = (page) => {
            items.forEach((item, index) => {
                item.style.display = (index >= (page - 1) * itemsPerPage && index < page * itemsPerPage) ? 'block' : 'none';
            });
            document.getElementById('prev-page').disabled = page === 1;
            document.getElementById('next-page').disabled = page === totalPages;
            const pageNumbers = document.getElementById('page-numbers');
            pageNumbers.innerHTML = '';
            for (let i = 1; i <= totalPages; i++) {
                const pageNumber = document.createElement('button');
                pageNumber.textContent = i;
                pageNumber.className = `px-4 py-2 border rounded-lg ${i === page ? 'bg-primary text-white' : 'bg-gray-300 text-gray-700'} hover:bg-primary hover:text-white focus:outline-none`;
                pageNumber.addEventListener('click', () => {
                    currentPage = i;
                    showPage(currentPage);
                });
                pageNumbers.appendChild(pageNumber);
            }
        };

        document.getElementById('prev-page').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
            }
        });

        document.getElementById('next-page').addEventListener('click', () => {
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
            }
        });

        // Initial display
        showPage(currentPage);
    });
    document.getElementById('sort').addEventListener('change', function() {
        const sortValue = this.value;
        const productsContainer = document.getElementById('products-container');
        const products = Array.from(productsContainer.children);

        let sortedProducts;

        switch (sortValue) {
            case 'price-low-to-high':
                sortedProducts = products.sort((a, b) => {
                    const priceA = parseFloat(a.getAttribute('data-price'));
                    const priceB = parseFloat(b.getAttribute('data-price'));
                    return priceA - priceB;
                });
                break;

            case 'price-high-to-low':
                sortedProducts = products.sort((a, b) => {
                    const priceA = parseFloat(a.getAttribute('data-price'));
                    const priceB = parseFloat(b.getAttribute('data-price'));
                    return priceB - priceA;
                });
                break;

            case 'latest':
                sortedProducts = products.sort((a, b) => {
                    const dateA = new Date(a.getAttribute('data-date'));
                    const dateB = new Date(b.getAttribute('data-date'));
                    return dateB - dateA;
                });
                break;

            default:
                sortedProducts = products; // Default sorting, no change
                break;
        }

        // Append sorted products back to the container
        productsContainer.innerHTML = '';
        sortedProducts.forEach(product => productsContainer.appendChild(product));
    });
</script>